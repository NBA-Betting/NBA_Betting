import sys

from sqlalchemy import (
    Column,
    Date,
    Float,
    Integer,
    PrimaryKeyConstraint,
    String,
    create_engine,
)
from sqlalchemy.orm import declarative_base

sys.path.append("../")
from passkeys import RDS_ENDPOINT, RDS_PASSWORD

Base = declarative_base()


# ADD TABLES HERE


class NbaStatsBoxscoresTraditionalTable(Base):
    __tablename__ = "ibd_nba_stats_boxscores_traditional"
    __table_args__ = (PrimaryKeyConstraint("player_id", "game_date"),)

    season = Column(String)
    season_type = Column(String)
    player = Column(String)
    player_id = Column(Integer)
    team = Column(String)
    team_id = Column(Integer)
    game_id = Column(String)
    match_up = Column(String)
    game_date = Column(Date)
    w_l = Column(String)
    min = Column(Integer)
    pts = Column(Integer)
    fgm = Column(Integer)
    fga = Column(Integer)
    fg_pct = Column(Float)
    three_pm = Column(Integer)
    three_pa = Column(Integer)
    three_p_pct = Column(Float)
    ftm = Column(Integer)
    fta = Column(Integer)
    ft_pct = Column(Float)
    oreb = Column(Integer)
    dreb = Column(Integer)
    reb = Column(Integer)
    ast = Column(Integer)
    stl = Column(Integer)
    blk = Column(Integer)
    tov = Column(Integer)
    pf = Column(Integer)
    plus_minus = Column(Integer)
    fp = Column(Float)


class NbaStatsBoxscoresAdvTraditionalTable(Base):
    __tablename__ = "ibd_nba_stats_boxscores_adv_traditional"
    __table_args__ = (PrimaryKeyConstraint("player_id", "game_date"),)

    season_year = Column(String)
    season_type = Column(String)
    player_id = Column(Integer)
    player_name = Column(String)
    nickname = Column(String)
    team_id = Column(Integer)
    team_abbreviation = Column(String)
    team_name = Column(String)
    game_id = Column(String)
    game_date = Column(Date)
    matchup = Column(String)
    w_l = Column(String)
    min = Column(Float)
    fgm = Column(Float)
    fga = Column(Float)
    fg_pct = Column(Float)
    three_pm = Column(Float)
    three_pa = Column(Float)
    three_p_pct = Column(Float)
    ftm = Column(Float)
    fta = Column(Float)
    ft_pct = Column(Float)
    oreb = Column(Float)
    dreb = Column(Float)
    reb = Column(Float)
    ast = Column(Float)
    tov = Column(Float)
    stl = Column(Float)
    blk = Column(Float)
    blka = Column(Float)
    pf = Column(Float)
    pfd = Column(Float)
    pts = Column(Float)
    plus_minus = Column(Float)
    nba_fantasy_pts = Column(Float)
    dd2 = Column(Float)
    td3 = Column(Float)


class NbaStatsBoxscoresAdvAdvancedTable(Base):
    __tablename__ = "ibd_nba_stats_boxscores_adv_advanced"
    __table_args__ = (PrimaryKeyConstraint("player_id", "game_date"),)

    season_type = Column(String)
    season_year = Column(String)
    player_id = Column(Integer)
    player_name = Column(String)
    nickname = Column(String)
    team_id = Column(Integer)
    team_abbreviation = Column(String)
    team_name = Column(String)
    game_id = Column(String)
    game_date = Column(Date)
    matchup = Column(String)
    w_l = Column(String)
    min = Column(Float)
    e_off_rating = Column(Float)
    off_rating = Column(Float)
    sp_work_off_rating = Column(Float)
    e_def_rating = Column(Float)
    def_rating = Column(Float)
    sp_work_def_rating = Column(Float)
    e_net_rating = Column(Float)
    net_rating = Column(Float)
    sp_work_net_rating = Column(Float)
    ast_pct = Column(Float)
    ast_to = Column(Float)
    ast_ratio = Column(Float)
    oreb_pct = Column(Float)
    dreb_pct = Column(Float)
    reb_pct = Column(Float)
    tm_tov_pct = Column(Float)
    e_tov_pct = Column(Float)
    efg_pct = Column(Float)
    ts_pct = Column(Float)
    usg_pct = Column(Float)
    e_usg_pct = Column(Float)
    e_pace = Column(Float)
    pace = Column(Float)
    pace_per40 = Column(Float)
    sp_work_pace = Column(Float)
    pie = Column(Float)
    poss = Column(Integer)
    fgm = Column(Integer)
    fga = Column(Integer)
    fgm_pg = Column(Float)
    fga_pg = Column(Float)
    fg_pct = Column(Float)


class NbaStatsBoxscoresAdvMiscTable(Base):
    __tablename__ = "ibd_nba_stats_boxscores_adv_misc"
    __table_args__ = (PrimaryKeyConstraint("player_id", "game_date"),)

    season_type = Column(String)
    season_year = Column(String)
    player_id = Column(Integer)
    player_name = Column(String)
    nickname = Column(String)
    team_id = Column(Integer)
    team_abbreviation = Column(String)
    team_name = Column(String)
    game_id = Column(String)
    game_date = Column(Date)
    matchup = Column(String)
    w_l = Column(String)
    min = Column(Float)
    pts_off_tov = Column(Integer)
    pts_2nd_chance = Column(Integer)
    pts_fb = Column(Integer)
    pts_paint = Column(Integer)
    opp_pts_off_tov = Column(Integer)
    opp_pts_2nd_chance = Column(Integer)
    opp_pts_fb = Column(Integer)
    opp_pts_paint = Column(Integer)
    blk = Column(Integer)
    blka = Column(Integer)
    pf = Column(Integer)
    pfd = Column(Integer)
    nba_fantasy_pts = Column(Float)


class NbaStatsBoxscoresAdvScoringTable(Base):
    __tablename__ = "ibd_nba_stats_boxscores_adv_scoring"
    __table_args__ = (PrimaryKeyConstraint("player_id", "game_date"),)

    season_type = Column(String)
    season_year = Column(String)
    player_id = Column(Integer)
    player_name = Column(String)
    nickname = Column(String)
    team_id = Column(Integer)
    team_abbreviation = Column(String)
    team_name = Column(String)
    game_id = Column(String)
    game_date = Column(Date)
    matchup = Column(String)
    w_l = Column(String)
    min = Column(Float)
    pct_fga_2pt = Column(Float)
    pct_fga_3pt = Column(Float)
    pct_pts_2pt = Column(Float)
    pct_pts_2pt_mr = Column(Float)
    pct_pts_3pt = Column(Float)
    pct_pts_fb = Column(Float)
    pct_pts_ft = Column(Float)
    pct_pts_off_tov = Column(Float)
    pct_pts_paint = Column(Float)
    pct_ast_2pm = Column(Float)
    pct_uast_2pm = Column(Float)
    pct_ast_3pm = Column(Float)
    pct_uast_3pm = Column(Float)
    pct_ast_fgm = Column(Float)
    pct_uast_fgm = Column(Float)
    fgm = Column(Float)
    fga = Column(Float)
    fg_pct = Column(Float)


class NbaStatsBoxscoresAdvUsageTable(Base):
    __tablename__ = "ibd_nba_stats_boxscores_adv_usage"
    __table_args__ = (PrimaryKeyConstraint("player_id", "game_date"),)

    season_type = Column(String)
    season_year = Column(String)
    player_id = Column(Integer)
    player_name = Column(String)
    nickname = Column(String)
    team_id = Column(Integer)
    team_abbreviation = Column(String)
    team_name = Column(String)
    game_id = Column(String)
    game_date = Column(Date)
    matchup = Column(String)
    w_l = Column(String)
    min = Column(Integer)
    usg_pct = Column(Float)
    pct_fgm = Column(Float)
    pct_fga = Column(Float)
    pct_fg3m = Column(Float)
    pct_fg3a = Column(Float)
    pct_ftm = Column(Float)
    pct_fta = Column(Float)
    pct_oreb = Column(Float)
    pct_dreb = Column(Float)
    pct_reb = Column(Float)
    pct_ast = Column(Float)
    pct_tov = Column(Float)
    pct_stl = Column(Float)
    pct_blk = Column(Float)
    pct_blka = Column(Float)
    pct_pf = Column(Float)
    pct_pfd = Column(Float)
    pct_pts = Column(Float)


class Nba2kPlayerTable(Base):
    __tablename__ = "ibd_nba2k_player"
    __table_args__ = (PrimaryKeyConstraint("player_name", "access_date"),)
    access_date = Column(Date)
    player_name = Column(String)
    bronze_badges = Column(Integer)
    silver_badges = Column(Integer)
    gold_badges = Column(Integer)
    hall_of_fame_badges = Column(Integer)
    outside_scoring = Column(Integer)
    close_shot = Column(Integer)
    mid_range_shot = Column(Integer)
    three_point_shot = Column(Integer)
    free_throw = Column(Integer)
    shot_iq = Column(Integer)
    offensive_consistency = Column(Integer)
    athleticism = Column(Integer)
    speed = Column(Integer)
    acceleration = Column(Integer)
    strength = Column(Integer)
    vertical = Column(Integer)
    stamina = Column(Integer)
    hustle = Column(Integer)
    overall_durability = Column(Integer)
    inside_scoring = Column(Integer)
    layup = Column(Integer)
    standing_dunk = Column(Integer)
    driving_dunk = Column(Integer)
    post_hook = Column(Integer)
    post_fade = Column(Integer)
    post_control = Column(Integer)
    draw_foul = Column(Integer)
    hands = Column(Integer)
    playmaking = Column(Integer)
    pass_accuracy = Column(Integer)
    ball_handle = Column(Integer)
    speed_with_ball = Column(Integer)
    pass_iq = Column(Integer)
    pass_vision = Column(Integer)
    defending = Column(Integer)
    interior_defense = Column(Integer)
    perimeter_defense = Column(Integer)
    steal = Column(Integer)
    block = Column(Integer)
    lateral_quickness = Column(Integer)
    help_defense_iq = Column(Integer)
    pass_perception = Column(Integer)
    defensive_consistency = Column(Integer)
    rebounding = Column(Integer)
    offensive_rebound = Column(Integer)
    defensive_rebound = Column(Integer)
    intangibles = Column(Integer)
    potential = Column(Integer)
    total_attributes = Column(Integer)


class FivethirtyeightPlayerTable(Base):
    __tablename__ = "ibd_fivethirtyeight_player"
    __table_args__ = (PrimaryKeyConstraint("player_id", "season", "to_date"),)
    to_date = Column(Date)
    player_name = Column(String)
    player_id = Column(String)
    season = Column(Integer)
    poss = Column(Integer)
    mp = Column(Integer)
    raptor_box_offense = Column(Float)
    raptor_box_defense = Column(Float)
    raptor_box_total = Column(Float)
    raptor_onoff_offense = Column(Float)
    raptor_onoff_defense = Column(Float)
    raptor_onoff_total = Column(Float)
    raptor_offense = Column(Float)
    raptor_defense = Column(Float)
    raptor_total = Column(Float)
    war_total = Column(Float)
    war_reg_season = Column(Float)
    war_playoffs = Column(Float)
    predator_offense = Column(Float)
    predator_defense = Column(Float)
    predator_total = Column(Float)
    pace_impact = Column(Float)


class InpredictableWPATable(Base):
    __tablename__ = "ibd_inpredictable_wpa"
    __table_args__ = (PrimaryKeyConstraint("to_date", "player", "rnk"),)

    rnk = Column(Integer)
    player = Column(String)
    pos = Column(String)
    gms = Column(Integer)
    wpa = Column(Float)
    ewpa = Column(Float)
    clwpa = Column(Float)
    gbwpa = Column(Float)
    sh = Column(Float)
    to = Column(Float)
    ft = Column(Float)
    reb = Column(Float)
    ast = Column(Float)
    stl = Column(Float)
    blk = Column(Float)
    kwpa = Column(Float)
    to_date = Column(Date)


if __name__ == "__main__":
    # Creates all database tables defined above that haven't been created yet.
    engine = create_engine(
        f"postgresql://postgres:{RDS_PASSWORD}@{RDS_ENDPOINT}/nba_betting"
    )
    Base.metadata.create_all(engine)
